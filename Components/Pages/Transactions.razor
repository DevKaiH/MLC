@page "/transactions"
@rendermode InteractiveServer
@using MLC.Services
@using MLC.Models
@using System;
@using System.IO;
@using System.Globalization;
@using System.Net.Http;
@using System.Net;
@using System.Collections.Generic;
@using CsvHelper;
@using CsvHelper.Configuration;
@inject IAccountSVC Accounts
@inject ITRANSSVC Trans
@inject IJSRuntime JSRuntime
@inject IPCFileSVC PC
@inject IsettingsSVC SS
@inject IMemberSVC Member

<script src="js/file-utils.js"></script>

<PageTitle>Transactions</PageTitle>

<DxFormLayout>
    <DxFormLayoutItem Caption="Working Period" ColSpanSm="4">
        <DxComboBox TData="Periods"
        TValue="Periods"
        Data="@PeriodDS"
        TextFieldName="@(nameof(Periods.Period))"
        ValueChanged="@((Periods selPeriod) => LoadTrans(selPeriod))">
        </DxComboBox>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Transaction Type" ColSpanSm="3">
        <DxComboBox 
        TData="Trantype"
        TValue="Trantype"
        Data="@trantypes"
        TextFieldName="@(nameof(Trantype.Transactiontype))"
        ValueChanged="@((Trantype selType) => TypeSelected(selType))">
        </DxComboBox>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Bank Account" ColSpanSm="4">
        <ChildContent Context="accountContext">
            <DxComboBox TData="TblAccount" Enabled="!DataComplete"
            TValue="TblAccount"
            Data="@AccountDS.Where(t => t.Type == "B")"
            TextFieldName="@(nameof(TblAccount.Description))"
            ValueChanged="@((TblAccount selAcct) => BankSelected(selAcct))"
            Value="SelBank" />
        </ChildContent>
    </DxFormLayoutItem>   

    <DxFormLayoutItem Caption="Transaction Date" ColSpanSm="3" >
        <DxDateEdit 
        NullText="Select Date..." 
        Date="Transactiondate" 
        Enabled="!DataComplete" 
        DateChanged="@((DateTime selectedValue) => dateSelected(selectedValue))" />
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="Description" ColSpanSm="3" >
        <DxTextBox Enabled="!DataComplete"@bind-Text="@NewTrans.Memo" />
    </DxFormLayoutItem>
    @if (TTypeSelected)
    {
        <DxFormLayoutItem Caption="Account" ColSpanSm="6">
            <ChildContent Context="anotherAccountContext">
                <DxComboBox TData="TblAccount"
                TValue="TblAccount"
                Data="@AccountDS.Where(t => t.Type == SelTType.Transactioncode)"
                TextFieldName="@(nameof(TblAccount.Description))"
                NullText="Select Account..."
                Value="SelAcct"
                ValueChanged="@((TblAccount selectedAcct) => AcctSelected(selectedAcct))"
                ValueExpression="@( () => SelAcct )"
                FilteringMode="DataGridFilteringMode.Contains"
                TextExpression="@( () => SelAcct.Description )"/>               
            </ChildContent>
        </DxFormLayoutItem>
    }
    @if (TTypeSelected && SelTType.Transactioncode == "I")
    {
        <DxFormLayoutItem Caption="Member" ColSpanSm="6">
            <ChildContent Context="anotherMemberContext">
                <DxComboBox 
                Data="@MemberDS"
                NullText="Select Member..."
                Value="SelMember"
                ValueChanged="@((TblMember selectedMember) => MemberSelected(selectedMember))"
                EditFormat="{0} {1}"
                SearchMode="@ListSearchMode.AutoSearch"
                SearchFilterCondition="@ListSearchFilterCondition.Contains">
                    <Columns>
                        <DxListEditorColumn FieldName="@nameof(TblMember.Firstname)" Caption="First Name" />
                        <DxListEditorColumn FieldName="@nameof(TblMember.Lastname)" Caption="Last Name" />        
                    </Columns>
                </DxComboBox>
            </ChildContent>
        </DxFormLayoutItem>
    }
    @if (DataComplete)

    {
        <DxFormLayoutItem Caption="Amount" ColSpanSm="3">
            <DxSpinEdit ValueChanged="@((decimal amtent) => AmtEntered(amtent))"
            Mask="@NumericMask.Currency"
            Increment="100"
            CssClass="cw-320"
            InputId="seMask">
                <DxNumericMaskProperties Culture="@Culture" />
            </DxSpinEdit>
        </DxFormLayoutItem>
        @if(SelTType.Transactioncode=="E"){
            <DxFormLayoutItem Caption="HST" ColSpanSm="3">
                <ChildContent Context="hstContext">
                    <DxSpinEdit @bind-Value="@hst"                           
                    Mask="@NumericMask.Currency"
                    Increment="100"
                    CssClass="cw-320"
                    InputId="seMask">
                        <DxNumericMaskProperties Culture="@Culture" />
                    </DxSpinEdit>

                </ChildContent>
            </DxFormLayoutItem>            
        }
        @if (TTypeSelected && SelTType.Transactioncode == "E")
        {
            <DxFormLayoutItem Caption="Detail Description" ColSpanSm="3">
                <DxTextBox Text="@NewDetail.Description" TextChanged="@OnDescriptionChanged" />
            </DxFormLayoutItem>
        }
    }

</DxFormLayout>

@if (trx)
{
    <DxGrid Data="TransDS"
    CssClass="ch-480"
    DataItemDeleting="DeleteTransaction" 
    TextWrapEnabled="false" 
    AutoExpandAllGroupRows="true"
    PagerVisible="false"
    VirtualScrollingEnabled="true"
    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
    ShowSearchBox="true" ColumnResizeMode="GridColumnResizeMode.NextColumn"
    AllowSelectRowByClick="true"  
    HighlightRowOnHover="true">

        <Columns>
            <DxGridDataColumn FieldName="Memo" VisibleIndex="1" />
            <DxGridDataColumn FieldName="Transactiondate" VisibleIndex="0" />
            <DxGridDataColumn FieldName="Total" DisplayFormat="c" VisibleIndex="2" />
            <DxGridCommandColumn VisibleIndex="3" EditButtonVisible="false" NewButtonVisible="false" />
        </Columns>
        <DetailRowTemplate>
            <TransactionDetails Transaction="@((context.DataItem as TblTransaction).Id)" />        
        </DetailRowTemplate>
    </DxGrid>

    @if (trx)
    {
        <DxFormLayout>
            <DxFormLayoutItem Caption="Total Credit" ColSpanSm="3">
                <ChildContent>
                    <DxTextBox Text="@string.Format("{0:C}", Ttl.TotalIncome)" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Total Debit" ColSpanSm="3">
                <ChildContent>
                    <DxTextBox Text="@string.Format("{0:C}", Ttl.TotalExpense)" />
                </ChildContent>
            </DxFormLayoutItem>
        </DxFormLayout>
    }
}

<DxButton Enabled="DetailComplete" Click="SavePMTDetail">Save Detail</DxButton>
<DxButton Enabled="DetailSaved" Click="() => ClearForm(true)">New Transaction</DxButton>
<DxButton Enabled="trx" Click="() => PCFile()">Create PC File</DxButton>

@if (DataComplete)
{
    <div class="upload-container">
        <div style="@(SelectedFilesCount > 0 ? "display: none" : string.Empty)">
            <span class="drop-file-icon mb-3"></span>
            <span class="drop-file-label mb-3">Click the Select File button to select files</span>
        </div>
        <DxFileInput AllowMultiFileUpload="true"
        SelectedFilesChanged="@SelectedFilesChanged"
        MaxFileSize="15000000"
        FilesUploading="OnFilesUploading">
        </DxFileInput>
    </div>
}
<DxPopup Visible="@popup" HeaderText="@popheader" Closing="warningClosed">

    <BodyContentTemplate>

        <p>@Message</p>

    </BodyContentTemplate>

</DxPopup>

@code
{
    public IEnumerable<TblAccount>? AccountDS { get; set; }
    public IEnumerable<TblTransaction>? TransDS { get; set; }
    public IEnumerable<TblTransactionDetail>? DetailsDS { get; set; }
    public IEnumerable<TblSetting>? SettingDS { get; set; }
    public IEnumerable<Periods>? PeriodDS { get; set; }
    public IEnumerable<TblMember>? MemberDS {get; set;}
    public Totals? Ttl { get; set; }
    bool TTypeSelected = false;
    bool DataComplete = false;
    bool DetailComplete = false;
    bool DetailSaved = false;
    bool popup = false;
    bool trx = false;
    string? popheader { get; set; }
    int SelectedFilesCount { get; set; }
    int TransID {get; set; }
    DateTime Transactiondate { get; set; } = DateTime.Now;
    decimal? hst { get; set;}
    decimal amt { get; set; }
    decimal gst { get; set; }
    decimal pst { get; set; }
    string ?gstStr { get; set; }
    string ?pstStr { get; set; }
    private TblTransaction NewTrans = new TblTransaction();
    private TblTransactionDetail NewDetail = new TblTransactionDetail();
    public string? Message { get; set; }
    public string? Filename { get; set; }
    private VRecipient? SelectedPerson;
    private TblAccount? SelAcct;
    private TblAccount? SelBank;
    private Periods? SelPeriod;
    private Trantype? SelTType;
    private TblMember? SelMember;
    private System.Timers.Timer _timer;
    CultureInfo Culture = CultureInfo.GetCultureInfo("en-US");

    public class Trantype
    {
        public string? Transactiontype { get; set; }
        public string? Transactioncode { get; set; }
    }

    public IEnumerable<Trantype> trantypes = new List<Trantype>()
    {
     new Trantype{Transactiontype="Contribution",Transactioncode="I"},
     new Trantype{Transactiontype="Expense",Transactioncode="E"},
    };

    private void TypeSelected(Trantype Seltype)
    {
        SelTType = Seltype;
        TTypeSelected = true;
        NewTrans.Memo = Seltype.Transactiontype;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AccountDS = Accounts.GetAccounts();
        PeriodDS = Trans.GetPeriods();  
        SettingDS = SS.GetTable();
        MemberDS = Member.GetMemberlist();
    }  

    private async Task LoadTrans(Periods SelectedPeriod)
    {
        SelPeriod = SelectedPeriod;
        Loadgrid();
    }
    private async Task startTimer()
    {
        _timer = new System.Timers.Timer(2000); // 2 seconds
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = false; // Only fire once
        _timer.Start();
    }
    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
     {
         warningClosed();
         StateHasChanged();
     });
    }

    public void Loadgrid()
    {
        TransDS = new List<TblTransaction>(Trans.GetList(SelPeriod));
        if (TransDS.Count() > 0)
        {
            trx = true;
            Ttl = Trans.GetTotals(SelPeriod);
        }
    }
    public void MemberSelected(TblMember SelectedMember)
    {
        SelMember = SelectedMember;
        DataComplete = true;
    }

    public void warningClosed()
    {
        popup = false;
        return;       
    }
    public void AmtEntered(decimal amt)
    {
        NewDetail.Amount = amt;
        if(SelTType.Transactioncode=="E")
        {
            calcTax();
        }

        if(SelTType.Transactioncode == "I")
        {
            DetailComplete = true;
        }
    }
    public void calcTax()
    {
        // Get constants from setting table

        var HST = SettingDS.Where(s => s.Property == "HST").Select(s => s.Value).FirstOrDefault();
        var GST = SettingDS.Where(s => s.Property == "GST").Select(s => s.Value).FirstOrDefault();
        var PST = SettingDS.Where(s => s.Property == "PST").Select(s => s.Value).FirstOrDefault();
        var GSTR = SettingDS.Where(s => s.Property == "GST Recover").Select(s => s.Value).FirstOrDefault();
        var PSTR = SettingDS.Where(s => s.Property == "PST Recover").Select(s => s.Value).FirstOrDefault();

        // calculate HST

        hst = (NewDetail.Amount * HST / (1 + HST)) ;      

        // calculate GST

        var GSTCalc = hst / (HST*100) * GST * 100;
        var GSTRec = GSTCalc * GSTR;

        // calculate PST

        var PSTCalc = hst / (HST * 100) * PST * 100;
        var PSTRec = PSTCalc * PSTR;

        NewDetail.Gst = GSTRec;
        NewDetail.Pst = PSTRec;
        NewDetail.Tax = hst;

        gstStr = String.Format(new CultureInfo("en-CA"), "{0:C}", GSTRec);
        pstStr = String.Format(new CultureInfo("en-CA"), "{0:C}", PSTRec);

    }
    public void dateSelected(DateTime selectedDate)
    {
        Transactiondate = selectedDate;
    }
    public void BankSelected(TblAccount acct)
    {
        SelBank = acct;
        SavePMT();       
    }
    public void AcctSelected(TblAccount acct)
    {
        SelAcct = acct;
        DataComplete = true;
    }
    private void OnDescriptionChanged(string newValue)
    {
        NewDetail.Description = newValue;
        DetailComplete = true;
    }
    async Task DeleteTransaction(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem is MLC.Models.TblTransaction transrec)
        {
            var deltrx = new TblPayment
                {
                    Id = transrec.Id
                };

            // Delete selected payment record

            Trans.DeleteTransaction(transrec);

            // reload grid

            Loadgrid();
        }
    }
    // Save new payment request

    public void SavePMT()
    {
        NewTrans.Account = SelBank.Id;
        NewTrans.Transactiondate = Transactiondate;
        NewTrans.AddTime = DateTime.Now;
        TransID = Trans.AddTransaction(NewTrans);
        if(TransID == 0)
        {
            Message = "An Error occured saving your transaction";
        }               
    }

    public void SavePMTDetail()
    {

        if(SelTType.Transactioncode=="E")
        {
            calcTax();
            NewDetail.Account = SelAcct.Id;
        }
        if (SelTType.Transactioncode == "I")
        {
            NewDetail.Member = SelMember.Id;
        }  
        
        NewDetail.TransactionId = TransID;
        NewDetail.Filename = Filename;
        Message = Trans.AddDetail(NewDetail);
        Loadgrid();
        popheader = "Detail Saved";
        popup = true;
        startTimer();

        NewDetail = new TblTransactionDetail();

        ClearForm(false);

    }
    public void ClearForm(bool ClearAll)
    {
        // Clear Form values reset bools

        // total reset - all controls and values

        if(ClearAll)
        {
            SelBank = null;           
            DataComplete = false;
            DetailSaved = false;
            NewTrans = new TblTransaction();
        }

        // partial reset values

        SelAcct = null;
        DetailComplete = false;
        DetailSaved = true;
        amt = 0;
        hst = 0;
        gst = 0;
        pst = 0;
        gstStr = null;
        pstStr = null;
        StateHasChanged();
    }
    public async Task PCFile()
    {
        {
            // get data

            var data = new List<PCFile>(PC.GetData(33));

            // Create a memory stream
            using var memStream = new MemoryStream();

            // Create a CSV writer with custom configuration
            var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture);
            using var csvWriter = new CsvWriter(new StreamWriter(memStream), csvConfig);
            csvWriter.WriteRecords(data); // Write data rows

            // Flush the writer and reset the position of the memory stream
            csvWriter.Flush();
            memStream.Position = 0;

            // Read the CSV content from the memory stream
            using var reader = new StreamReader(memStream);
            var csvContent = reader.ReadToEnd();

            // Create an HTTP response with the CSV content
            var response = new HttpResponseMessage(HttpStatusCode.OK);
            response.Content = new StringContent(csvContent);
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            response.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment")
                {
                    FileName = "MyCsvFile.csv"
                };

            // Return the response

            await JSRuntime.InvokeAsync<object>("saveFile", "MyCsvFile.csv", csvContent);

        }
    }
    // count files to be uploaded

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);       
    }
    // upload files and insert file name into table

    protected async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        foreach (var file in args.Files)
        {
            int dotFromEnd = file.Name.Length - file.Name.IndexOf(".");
            string suffix = file.Name.Substring(file.Name.Length - dotFromEnd, dotFromEnd);
            Filename = Guid.NewGuid().ToString() + suffix;
            string appRoot = AppDomain.CurrentDomain.BaseDirectory;
            string filepath = Path.Combine(appRoot, "_receipts", Filename).Replace("\\bin\\Debug\\net7.0\\", "\\wwwroot\\");
            await using FileStream fs = new FileStream(filepath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            //NewTrans.Filename = Filename;
            using var stream = new System.IO.MemoryStream();
            await file.OpenReadStream(file.Size).CopyToAsync(stream);
        }
    }
}



