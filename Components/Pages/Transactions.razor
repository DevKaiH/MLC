@page "/transactions"
@rendermode InteractiveServer
@using MLC.Services
@using MLC.Models
@using System;
@using System.IO;
@using System.Globalization;
@using System.Net.Http;
@using System.Net;
@using System.Collections.Generic;
@using CsvHelper;
@using CsvHelper.Configuration;
@inject IAccountSVC Accounts
@inject ITRANSSVC Trans
@inject IJSRuntime JSRuntime
@inject IPCFileSVC PC
@inject IsettingsSVC SS

<script src="js/file-utils.js"></script>

<PageTitle>Transactions</PageTitle>

<h1>Enter Expenses</h1>

<DxFormLayout>

    <DxFormLayoutItem Caption="Date">
        <DxDateEdit NullText="Select Date..." Date="Transactiondate" DateChanged="@((DateTime? selectedValue) => dateSelected(selectedValue))" />
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="Memo">
        <DxTextBox @bind-Text="@NewTrans.Memo" />
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="Bank Account">
        <ChildContent Context="accountContext">
            <DxComboBox TData="TblAccount"
            TValue="TblAccount"
            Data="@AccountDS.Where(t => t.Type == "B")"
            TextFieldName="@(nameof(TblAccount.Acct))"
            ValueChanged="@((TblAccount selAcct) => BankSelected(selAcct))"
            Value="SelBank" />
        </ChildContent>
    </DxFormLayoutItem>
    @if (DataComplete)
    {
        <DxFormLayoutItem Caption="Account">
            <ChildContent Context="anotherAccountContext">
                <DxComboBox TData="TblAccount"
                TValue="TblAccount"
                Data="@AccountDS.Where(t => t.Type == "E")"
                TextFieldName="@(nameof(TblAccount.Description))"
                NullText="Select Account..."
                Value="SelAcct"
                ValueChanged="@((TblAccount selectedAcct) => AcctSelected(selectedAcct))"
                ValueExpression="@( () => SelAcct )"
                TextExpression="@( () => SelAcct.Description )"
                FilteringMode="DataGridFilteringMode.Contains" />
            </ChildContent>
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="Amount">
            <DxSpinEdit ValueChanged="@((decimal amtent) => AmtEntered(amtent))"
            Mask="@NumericMask.Currency"
            Increment="100"
            CssClass="cw-320"
            InputId="seMask">
                <DxNumericMaskProperties Culture="@Culture" />
            </DxSpinEdit>
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="HST">
            <ChildContent Context="hstContext">
                <DxSpinEdit @bind-Value="@hst"                           
                Mask="@NumericMask.Currency"
                Increment="100"
                CssClass="cw-320"
                InputId="seMask">
                    <DxNumericMaskProperties Culture="@Culture" />
                </DxSpinEdit>

            </ChildContent>
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="GST Recoverable">
            <ChildContent Context="gstContext">
                <DxTextBox @bind-Text="@gstStr" />
            </ChildContent>
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="PST Recoverable">
            <ChildContent Context="pstContext">
                <DxTextBox @bind-Text="@pstStr" />
            </ChildContent>
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="Detail Description">   
            <DxTextBox Text="@NewDetail.Description" TextChanged="@OnDescriptionChanged" />
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="Upload Receipt">
            <div class="upload-container">
                <div style="@(SelectedFilesCount > 0 ? "display: none" : string.Empty)">
                    <span class="drop-file-icon mb-3"></span>
                    <span class="drop-file-label mb-3">Click the Select File button to select files</span>
                </div>
                <DxFileInput AllowMultiFileUpload="true"
                SelectedFilesChanged="@SelectedFilesChanged"
                MaxFileSize="15000000"
                FilesUploading="OnFilesUploading">
                </DxFileInput>
            </div>
        </DxFormLayoutItem>
    }
</DxFormLayout>


<DxGrid Data="TransDS" DataItemDeleting="DeleteTransaction" ColumnResizeMode="GridColumnResizeMode.ColumnsContainer" TextWrapEnabled=true>

    <Columns>
        <DxGridDataColumn FieldName="Transactiondate"/>
        <DxGridDataColumn FieldName="Memo" />


        <DxGridCommandColumn VisibleIndex="5" EditButtonVisible="false" NewButtonVisible="false" />
    </Columns>
    <GroupSummary>
        <DxGridSummaryItem FieldName="Amount" SummaryType="GridSummaryItemType.Sum" />
    </GroupSummary>
    <TotalSummary>
        <DxGridSummaryItem FieldName="Amount" SummaryType="GridSummaryItemType.Sum" FooterColumnName="Amount" />
    </TotalSummary>
</DxGrid>

<DxButton Enabled="DetailComplete" Click="SavePMTDetail">Submit</DxButton>
<DxButton Enabled="trx" Click="() => PCFile()">Create PC File</DxButton>
<DxPopup Visible="@popup" HeaderText="@popheader" Closing="warningClosed">

    <BodyContentTemplate>

        <p>@Message</p>

    </BodyContentTemplate>

</DxPopup>

@code
{
    public IEnumerable<TblAccount>? AccountDS { get; set; }
    public IEnumerable<TblTransaction>? TransDS { get; set; }
    public IEnumerable<TblTransactionDetail>? DetailsDS { get; set; }
    public IEnumerable<TblSetting>? SettingDS { get; set; }
    bool DataComplete = false;
    bool DetailComplete = false;
    bool popup = false;
    bool trx = false;
    string? popheader { get; set; }
    int SelectedFilesCount { get; set; }
    int TransID {get; set; }
    DateTime? Transactiondate { get; set; }
    decimal? hst { get; set;}
    decimal amt { get; set; }
    decimal gst { get; set; }
    decimal pst { get; set; }
    string gstStr { get; set; }
    string pstStr { get; set; }
    private TblTransaction NewTrans = new TblTransaction();
    private TblTransactionDetail NewDetail = new TblTransactionDetail();
    public string? Message { get; set; }
    public string? Filename { get; set; }
    private VRecipient? SelectedPerson;
    private TblAccount? SelAcct;
    private TblAccount? SelBank;
    private System.Timers.Timer _timer;
    CultureInfo Culture = CultureInfo.GetCultureInfo("en-US");

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AccountDS = Accounts.GetAccounts();
        Reloadgrid();
        if (TransDS.Count() > 0)
        {
            trx = true;
        }

        SettingDS = SS.GetTable();

    }  
    private async Task startTimer()
    {
        _timer = new System.Timers.Timer(2000); // 2 seconds
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = false; // Only fire once
        _timer.Start();
    }
    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
     {
         warningClosed();
         StateHasChanged();
     });
    }

    public void Reloadgrid()
    {
        TransDS = new List<TblTransaction>(Trans.GetList());
    }
    public void PersonSelected(VRecipient Person)
    {
        SelectedPerson = Person;

        Reloadgrid();
    }
    public void warningClosed()
    {
        popup = false;
        return;       
    }
    public void AmtEntered(decimal amt)
    {
        NewDetail.Amount = amt;
        calcTax();
    }
    public void TaxEntered(decimal amt)
    {
        NewDetail.Tax = amt;
        calcTax();
    }
    public void calcTax()
    {
        // Get constants from setting table

        var HST = SettingDS.Where(s => s.Property == "HST").Select(s => s.Value).FirstOrDefault();
        var GST = SettingDS.Where(s => s.Property == "GST").Select(s => s.Value).FirstOrDefault();
        var PST = SettingDS.Where(s => s.Property == "PST").Select(s => s.Value).FirstOrDefault();
        var GSTR = SettingDS.Where(s => s.Property == "GST Recover").Select(s => s.Value).FirstOrDefault();
        var PSTR = SettingDS.Where(s => s.Property == "PST Recover").Select(s => s.Value).FirstOrDefault();

        // calculate HST

        hst = (NewDetail.Amount * HST / (1 + HST)) ;      

        // calculate GST

        var GSTCalc = hst / (HST*100) * GST * 100;
        var GSTRec = GSTCalc * GSTR;

        // calculate PST

        var PSTCalc = hst / (HST * 100) * PST * 100;
        var PSTRec = PSTCalc * PSTR;

        NewDetail.Gst = GSTRec;
        NewDetail.Pst = PSTRec;

        gstStr = String.Format(new CultureInfo("en-CA"), "{0:C}", GSTRec);
        pstStr = String.Format(new CultureInfo("en-CA"), "{0:C}", PSTRec);

    }
    public void HSTEntered(decimal amt)
    {
        NewDetail.Tax = amt;
    }
    public void dateSelected(DateTime? selectedDate)
    {
        Transactiondate = selectedDate;
    }
    public void BankSelected(TblAccount acct)
    {
        SelBank = acct;
        SavePMT();
        DataComplete = true;
    }
    public void AcctSelected(TblAccount acct)
    {
        SelAcct = acct;
    }
    private void OnDescriptionChanged(string newValue)
    {
        NewDetail.Description = newValue;

        DetailComplete = true;
    }
    async Task DeleteTransaction(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem is MLC.Models.TblTransaction transrec)
        {
            var deltrx = new TblPayment
                {
                    Id = transrec.Id
                };

            // Delete selected payment record

            Trans.DeleteTransaction(transrec);

            // reload grid

            Reloadgrid();
        }
    }
     // Save new payment request

    public void SavePMT()
    {
        NewTrans.Account = SelBank.Id;
        NewTrans.Transactiondate = Transactiondate;
        TransID = Trans.AddTransaction(NewTrans);
        if(TransID == 0)
        {
            Message = "An Error occured saving your transaction";
        }                
    }

    public void SavePMTDetail()
    {
        NewDetail.Account = SelAcct.Id;
        NewDetail.TransactionId = TransID;
        NewDetail.Filename = Filename;
       
        Message = Trans.AddDetail(NewDetail);
        Reloadgrid();
        popheader = "Detail Saved";
        popup = true;
        startTimer();

        // Clear objects

        NewTrans = new TblTransaction();
    }
    public async Task PCFile()
    {
        {
            // get data

            var data = new List<PCFile>(PC.GetData(33));

            // Create a memory stream
            using var memStream = new MemoryStream();

            // Create a CSV writer with custom configuration
            var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture);
            using var csvWriter = new CsvWriter(new StreamWriter(memStream), csvConfig);
            csvWriter.WriteRecords(data); // Write data rows

            // Flush the writer and reset the position of the memory stream
            csvWriter.Flush();
            memStream.Position = 0;

            // Read the CSV content from the memory stream
            using var reader = new StreamReader(memStream);
            var csvContent = reader.ReadToEnd();

            // Create an HTTP response with the CSV content
            var response = new HttpResponseMessage(HttpStatusCode.OK);
            response.Content = new StringContent(csvContent);
            response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
            response.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment")
                {
                    FileName = "MyCsvFile.csv"
                };

            // Return the response

            await JSRuntime.InvokeAsync<object>("saveFile", "MyCsvFile.csv", csvContent);

        }
    }
    // count files to be uploaded

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);       
    }
    // upload files and insert file name into table

    protected async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        foreach (var file in args.Files)
        {
            int dotFromEnd = file.Name.Length - file.Name.IndexOf(".");
            string suffix = file.Name.Substring(file.Name.Length - dotFromEnd, dotFromEnd);
            Filename = Guid.NewGuid().ToString() + suffix;
            string appRoot = AppDomain.CurrentDomain.BaseDirectory;
            string filepath = Path.Combine(appRoot, "_receipts", Filename).Replace("\\bin\\Debug\\net7.0\\", "\\wwwroot\\");
            await using FileStream fs = new FileStream(filepath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            //NewTrans.Filename = Filename;
            using var stream = new System.IO.MemoryStream();
            await file.OpenReadStream(file.Size).CopyToAsync(stream);
        }
    }
}



