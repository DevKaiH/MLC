@page "/users"
@rendermode InteractiveServer
@using MLC.Models
@using MLC.Services
@using System.ComponentModel.DataAnnotations;

@inject IUserSVC userSVC

<PageTitle>Users</PageTitle>

<label for="findUser">Find User</label>
<InputText @bind-Value="searchUser" class="mb-2" />
<button @onclick="findUser" class="ml-2">Find</button>


@if (userProfile != null)
{

    <EditForm Model="userProfile" OnValidSubmit="HandleValidSubmit">

        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="FirstName">First Name</label>
                    <InputText id="FirstName" @bind-Value="userProfile.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.FirstName)" />
                </div>

                <div class="form-group">
                    <label for="LastName">Last Name</label>
                    <InputText id="LastName" @bind-Value="userProfile.LastName" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.LastName)" />
                </div>

                <div class="form-group">
                    <label for="Email">Email</label>
                    <InputText id="Email" @bind-Value="userProfile.Email" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.Email)" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="Cell">Cell</label>
                    <InputText id="Cell" @bind-Value="userProfile.Cell" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.Cell)" />
                </div>

                <div class="form-group">
                    <label for="Bank">Bank</label>
                    <InputText id="Bank" @bind-Value="userProfile.Bank" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.Bank)" />
                </div>

                <div class="form-group">
                    <label for="Transit">Transit</label>
                    <InputText id="Transit" @bind-Value="userProfile.Transit" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.Transit)" />
                </div>

                <div class="form-group">
                    <label for="Account">Account</label>
                    <InputText id="Account" @bind-Value="userProfile.Account" class="form-control" />
                    <ValidationMessage For="@(() => userProfile.Account)" />
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>

    </EditForm>
}

<div>
    @SaveMessage
</div>

@code {

    private TblRecipient userProfile = new TblRecipient();

    public bool showSelector = false;
    private string? SaveMessage { get; set; }
    private string? searchUser { get; set; }
    private int selectedUserId;
    private EditContext? editContext;

    public IEnumerable<TblRecipient>? userDS { get; set; } = null;

    protected override void OnInitialized()
    {
        // Initialize the EditContext

        editContext = new EditContext(userProfile);

        base.OnInitialized();
    }

    private void HandleValidSubmit()
    {
        if(selectedUserId == 0)
        {
            SaveMessage = userSVC.addUser(userProfile);
        }
        else
        {
            SaveMessage = userSVC.updateUser(userProfile);
        }
    }

    private void findUser()
    {
       
       

        showSelector = true;

        // Reset userProfile to prevent conflicts with EditForm.
                
        userProfile = new TblRecipient();

        // Reset the EditContext.
        editContext = new EditContext(userProfile);
    }
    private void selectUser(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int userId))
        {
            // Now 'userId' contains the selected user's ID, and you can use it as needed.
            userProfile = userDS.FirstOrDefault(u => u.Id == userId);
        }
    }


}
